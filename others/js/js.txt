JS

数据类型
字符串（String）、数字(Number)、布尔(Boolean)、数组(Array)、对象(Object)、空（Null）、未定义（Undefined）
//强制类型转换
Number()      
String() 
Boolean()

parseInt()   //存在不可解析字符时结束 只解析之前的字符串 

typeof()   //类型查看 number string boolean object function


变量
var x=var_value;   //变量指定时不需指定类型 指定值动态设置类型
let x=var_value;   //作用域只在当前块

const定义的变量不可以修改，而且必须初始化。
var定义的变量可以修改，如果不初始化会输出undefined，不会报错。
let是块级作用域，函数内部使用let定义后，对函数外部无影响。

数组
var mycars=new Array();
mycars[0]="Saab";
mycars[1]="Volvo";
var mycars2=new Array("Saab","Volvo","BMW");


函数
function function_name(x,y){
return x*y;
}
function_name(10,20)    //调用

var function_name = function(a,b){
 return a + b;
}
function_name(10,20)   ///调用

回调函数 callback
A callback is a function that is passed as an argument to another function and 
is executed after its parent function has completed.

var f=function(x,y,z){
    return (x+y+z);
};

var ff = function(callback)
{
    var a = 1,
        b = 2,
        c = 3;
    var t = callback(a,b,c);   ///callback不是关键字，可以任取
    return t + 10;
};

console.log(ff());

// 剩余参数
var f =function(...args) {
    // args 即为数组
    return args.reduce((pre,current) => {
        return pre + current;
    });
}

// () => {}  //创建匿名函数
var f=(x) => x+1
var f=function(x){return x+1}


...[]             // 将数组转成","分隔的队列
[1, ...[2,3,4]]   // 实现队列合并

// yield //可以实现多次返回 
function* f(){
    yield '111'
    yield '222'
    return '333'
}


let f1=f()
f1.next()     // 逐个获取yield的值

for(let i of f()){}   // for...of语句迭代  


//匿名函数直接调用
!function(){console.log('xxxx');}()        // true  运行函数，返回值即为函数的返回值的!操作(即取反操作)
+function(){console.log('xxxx');}()        // NaN
-function(){console.log('xxxx');}()        // NaN
~function(){console.log('xxxx');}()        // -1
(function(){console.log('xxxx');})()       //只是运行 返回值即为函数的返回值


eval(string)   //以js命令执行字符串
eval("x=10;y=20;console.log(x*y)")


alert(string);        //浏览器中弹出对话框
console.clear();      //chrome控制台中清屏

var id = setTimeout("function",time)   // 只执行一次 时间单位为毫秒
var id = setInterval("function",time)  // 重复执行

clearTimeout(id);               //取消定时 为window对象可以加上前缀 window.clearTimeout(id)
clearInterval()

js 的执行顺序为异步模式 即如果执行多个函数，执行的顺序不是逐一顺序运行。如果需要实现这个目的，可以通过回调函数实现，或者使用jQuery中的控制方案


//异步
let f =()=>new Promise(resolve=>{
        //进行一些耗时操作
        resolve( "aaa" )   // then获取的返回值
    })

f().then(
    //运行耗时操作后的操作 result为定义中resolve的返回值 
    //result不是关键字 即提供回调函数处理
    result=>{
        
    }
)


let f1 =(flag)=>new Promise((resolve,reject)=>{
        //进行一些耗时操作
        if (flag) {
            resolve( "aaa" )   // then获取的返回值
        }else{
           reject( "bbb" )     // catch
        }
    })

f1(1).then(
    //运行耗时操作后的操作 result为定义中resolve的返回值 result不是关键字
    result=>{
        // 正确返回的回调函数
    }
).catch(
    result1=>{
        // 错误返回的回调函数
    }
)

//then可以有多个 
f().then().then().then()....then.catch()


headers
Connection: keep-alive       #请求网页一次之后tcp连接没有关闭 连接依旧保持



//在js中实现js脚本加载 可用于chrome console的调试
var script = document.createElement('script');
script.src = "https://cdn.bootcss.com/jquery/2.1.2/jquery.min.js";
document.getElementsByTagName('head')[0].appendChild(script)


// 查看当前页的对象 可用通过 window.xxx 调用
(function(){
    const keys=[]
    const iframe = document.createElement("iframe");
    iframe.src="about:blank"
    iframe.onload=function(){
        const subKeys = Object.keys(iframe.contentWindow)
        Object.keys(window).forEach(function(key){
          if(!subKeys.includes(key)) {
              keys.push(key)
          }              
        })
        console.log(keys)
    }
    document.body.appendChild(iframe)
    
})();


// 获取地理位置信息
displayPosition=function(pos){
    console.log(pos.coords.latitude,pos.coords.longitude);
    //console.log(pos);
}
    
navigator.geolocation.getCurrentPosition(displayPosition)


function getDataFromJson(jsonFilename) {
  // 从json文件读取数据 如传入 'my1.json'
  fetch(jsonFilename)
    .then(response => response.json())
    .then(data => {
      // 转成js对象
      console.log(data);
    })
    .catch(error => console.error('Error :', error));
}
  

/////////////////////
<script async defer src="http://myhost/my.js"> 
 /*js code in here*/
</script>

正常模式
浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。

async模式
js会被异步加载，即加载和渲染后续文档元素的过程将和 js 的加载并行进行（异步）。
当 js加载完整立即执行js。执行js时，html解析暂停。执行顺序与代码的顺序无关，不保证执行顺序。

defer 模式
js会被异步加载，加载完成并不会立即执行，而是在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。因此它会按照代码的顺序执行。


延迟脚本并不一定会按照顺序执行，也不一定会在 DOMContentLoaded 事件触发前执行，因此最好只包含一个延迟脚本。

