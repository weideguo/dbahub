########################################################################################################################
vue 
######################模块设置
#path_to_file/name.vue
<template>
...some content in here...
</template>
export default {
  name: 'dataSourcePie',            #模块名
  data () {                         #供函数 页面使用的变量
    return {
      todoitem: false
    };
  },
  methods: {                        #模块中使用的函数
    function_name: function(v1,v2){...},
  },
  mounted () {                      #html加载后执行
  },
  created (){                       #html加载前执行
  },
  props: {
    content: String                 #父页传给模块的参数 通过 <data-source-pie :content="xxxx"></data-source-pie>
  },
  
}
  

################使用模块
<template>
<data-source-pie></data-source-pie>
</template>
<script>
import dataSourcePie from 'path_to_file/name.vue'
export default {
    components: {
      dataSourcePie
    },
}
</script>





computed:方法可以直接当成属性使用
created:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。
mounted:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。
watch：监听某一变量变化时执行操作




vuex.store
将store文件夹分为四个文件夹，分别是actions,mutations,getters,state。

action: 和mutatation功能是类似的，都是修改state里面的数据，区别是action用于异步修改  如setTimeout

mutations：用于处理同步数据修改

getter：后端传过来的数据，如果需要做一些处理就在getter里面写。computer一样，都是对后台返回的数据做处理，只是这个可以应用多个页面

state：存放后端传过来的原生数据。

const store = new Vuex.Store({})

#######################################################

new Vue({
  el: '#all',           #渲染的dom对象的ID
  template: '<app/>',   #使用模块的html设置
  components: {app},    #使用的模块进行渲染  组建可以为一个 vue文件如 import app from 'file_to_path/filename.vue'
  store: store,         #store对象
  router: router        #路由规则   即为对组建<router-view></router-view>的渲染
})


########################################################################################################################

#安装vue-cli
npm install -g vue-cli

#新建项目
vue init webpack my-project


main.js 为主脚本




两者等价，后者为缩写
熟悉绑定
v-bind:
:

v-on:
@



# 新版本vue-cli
npm install -g @vue/cli
vue create my-project



########################################################################################################################
SSR Server-Side Rendering（single page application，SPA 在服务端渲染）

nuxt.js 基于vue的ssr框架






















