worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    
    
    server {
        server_name  somename;
        access_log logs/access_proxy-80.log;
        resolver 114.114.114.114;
        listen 80;
        location / {
            proxy_pass http://$http_host$request_uri;
            proxy_set_header HOST $http_host;
            proxy_buffers 256 4k;
            proxy_max_temp_file_size 0k;
            proxy_connect_timeout 30;
            proxy_send_timeout 60;
            proxy_read_timeout 60;
            proxy_next_upstream error timeout invalid_header http_502;
        }
    }
    
    server {
        server_name localhost;
        access_log logs/access_proxy-443.log;
        resolver 114.114.114.114;
        listen 443;  
            
        #proxy_connect;      #使用第三方模块时才能使用
        location / {
            #proxy_pass $scheme://$host$request_uri;    #适应http以及https
            proxy_pass https://$host$request_uri;
        }
    }
}

#正向代理http
#curl --proxy "proxy_server:80" "http://web_hostname"


#正向代理https

#引入第三方模块  需要从github下载模块
#./configure --add-module=/path/to/ngx_http_proxy_connect_module
#可以做到全链路数据都是https传输 当前主机<->代理机<->服务器
#curl --proxy "proxy_server:443" "https://web_hostname"

#不安装第三方模块 https和http的访问通过使用不同端口实现
#初始请求的地址使用http，当前主机<->代理机 是http传输； 代理机<->服务器 是https传输
#curl --proxy "proxy_server:443" "http://web_hostname"

##################################
代理使用http的connect方法(跟get post put delete同一级别)

squid 专用于正向代理

