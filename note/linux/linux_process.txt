进程管理
ps -ef | grep java       ##查看有关与java的进程
pgrep java


线程管理
ps -T                    ##查看所有线程
ps -T -p $pid            ##查看某个进程的线程
ps -eLo pid,lwp,psr,args | grep qemu   #第三列代表线程运行的第几个cpu


ps -xH   #查看所有线程


ps aux   
#rss  占用的物理内存，包含调用的.so共享文件
#vss  占用的虚拟内存


ps -eF
#SZ  由进程单独占用的物理内存
#PSR 进程占用的处理器数量
#STAT 线程、进程状态

D uninterruptible sleep (通常io使用)
R running or runnable (on run queue)
S interruptible sleep (waiting for an event to complete)
T stop
W paging(2.6+内核不适用)
X dead(不会被看到)
Z defunct ("zombie") process (终止但未被父进程回收)

< 高优先级
N 低优先级
L 在内存中
s is a session leader
l is mult-threaded
+ is in the foreground process group


ps -ely 

ps -U user_name   #查看用户当前运行的进程

ps -ejH   #查看进程树
ps axjf   

pstree $pid                ##查看进程、线程的层级
tree                    ##展示目录的树状结构

pstree -p $pid | awk -F"[()]" '{print $2}'| xargs kill -9            #杀死进程以及相关子进程


pidof ${command}        ##查看当前命令的pid            


stty -a                 ###查看信号对应的操作
kill -HUP ${pid}        ##程序可能自定义处理这些信号而不是结束进程，从而实现重新加载配置等操作，这需要程序支持才能如此
kill -SIGUSR1 ${pid}                

                        ## kill默认用TERM
kill -l                 ##列出所有信号名称

AIX  显示10个消耗cpu最多的进程
ps aux |head -1 ;ps aux |sort -rn +2 |head -10   ###修改【sort -rn +x】指定由第x+1列排序


ps -p pid -o lstart   #查看进程启动时间



ll /proc/$PID    #查看进程的绝对路径

cwd 进程运行的目录
exe 执行程序的绝对路径
cmdline 程序运行的输入的命令
environ 进程运行时的环境变量
fd 进程打开或使用的文件符号连接


# https://github.com/torvalds/linux/blob/master/Documentation/filesystems/proc.rst
cat /proc/$PID/io  # 查看进行的IO
rchar 进行从存储读取的字节数（磁盘、磁盘缓存），可用于判断mysql的执行sql文件导入的进度


time sleep 1
time命令的输出
   
real/user/sys   
   
程序从开始到结束所经历的时间，也就是用户所感受到的时间。包括当前程序CPU的用时和所有延迟程序执行的因素的耗时总和（比如其他程序耗时，等待I/O完成耗时等）。
程序执行过程中在用户空间（user space）中所花费的所有时间，即程序用户模式下的CPU耗时。当前进程I/O阻塞的时间均不计在内。库代码调用仍然是在用户模式下。
程序执行过程中内核空间（kernel space）中所花费的时间，即程序在内核调用中的CPU耗时。   


进程间通信
ipcmk -Q   ##创建message queue
 
ipcs -q    ##查看message queue

lsipc

ipcrm

