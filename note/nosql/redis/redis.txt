
make                                    ####编译
make  PREFIX=$prefix_path install       ####安装，如不使用PREFIX参数，默认安装在/usr/local/bin下

参数文件的设置
requirepass my_poassword                ##使用密码
dir data_path                           ##设置数据文件的路径，只指定目录 


redis-server redis.conf                 ###启动服务端
redis-cli  shutdown                     ###关闭
redis-cli                               ###进入命令行界面

可以可以直接使用telnet命令进入

########命令不分大小写######################################################################################################

AUTH password                 ###使用密码登录，如果参数文件启用requirepass参数，则必须使用密码登陆
ECHO "message"                #
PING                          ###向Redis服务器发送一个 PING，连接则返回PONG
SELECT 1                      ###打开id为1的数据库，默认数据库id为0
QUIT                          ###退出客户端

KEYS pattern                  ###匹配符合的key   【keys *】显示所有key  如果key数据量较大 可能导致被阻塞时间较长 生产环境谨慎使用
dbsize                        ###key的数量
EXISTS key                    ###查看key是否存在
MOVE key db                   ###将当前数据库中指定的键Key移动到参数中指定的数据库中。
RENAME key                    ###为key更名
RENAMEENX key                 ###
PERSIST key                   ###持久化key
EXPIRE key seconds            ###该命令为参数中指定的Key设定超时的秒数，在超过该时间后，Key被自动的删除
EXPIREAT key timestamp        ###使用绝对时间设置超时
TTL key                       ###获取该键所剩的超时描述 -1为没有超时或不存在
RANDOMKEY                     ###随机获取key
TYPE key                      ###获取key的数据类型
SORT key                      ###返回排序后的原始列表。
INCR key                      ###将 key 中储存的数字值增一
monitor                       ###实时打印出redis服务接收到的命令
sync                          ###用于同步主从
client pause <millisecond>    ##在指定时间内阻塞客户端的命令


##慢查询
slowlog len                   #获取慢查询日志长度
slowlog get 2                 #获取慢查询语句，获取两个
SLOWLOG RESET                 #重置


#redis支持事务
MULTI                         ###开启事务
EXEC                          ###提交事务
DISCARD                       ###用来取消一个事务，可以实现回滚
WATCH key                     ###在事务中监视key
UNWATCH key                   ###取消对key的监视


multi
set a 111
incr b         # 这一步失败，exec之后set还会生效
exec           # 只有运行exec时才有真正的报错提示，但出现报错不会触发回滚，因此有可能出现只是部分操作被提交，部分操作因报错没有生效


WATCH命令可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行。监控一直持续到EXEC命令（事务中的命令是在EXEC之后才执行的，所以在MULTI命令后可以修改WATCH监控的键值）
   WATCH mykey
   val = GET mykey
   val = val + 1
   MULTI
   SET mykey $val        # 如果mykey被其他并发修改，则这里不生效
   EXEC




SAVE                                ##备份
BGSAVE                              ##在后台备份 父进程继续处理客户端请求，fork出子进程，负责将数据保存到磁盘


参数在线更改
CONFIG GET dir                      ###获取配置文件中dir的设置  将数据文件放入指定位置即可完成数据恢复
config get *                        ###获取所有设置参数
CONFIG set requirepass password     ###设置配置中requirepass的值，这里为设置登录密码
CONFIG REWRITE                      ###同时修改配置文件

SHUTDOWN                            ###关闭正在连接的服务端
FLUSHDB                             ###清空当前数据库
FLUASHALL                           ###清空所有数据库          
rename <old-command> <new-command>  ###通过重命名实现禁用命令



INFO                                ###查看服务器状态 
client list                         ###查看连接的客户端
dbsize                              ###当前数据库的keys的数量

info commandstats                   ###命令的执行统计


客户端通信
客户端1，接收
SUBSCRIBE redisChat    ##可以订阅多个channel ; subscribe channel1 [channel2 ]
客户端2，发送
PUBLISH redisChat "weideguo is a greate guy"

UNSUBSCRIBE  channel1  ###退订channel1


特殊channel
配置文件设置 notify-keyspace-events Ex

SUBSCRIBE __keyevent@0__:expired    #监听数据库0中的过期事件    



##交互模式中执行 lua代码
EVAL "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}" 2 key1 key2 first second
eval "return redis.call('set','foo','bar')" 0
eval "return redis.call('set',keys[1],argv[1])" 1 name weideguo

redis.call()
redis.pcall()

eval "return #redis.call('keys','n*')" 0  #计算配备key的数量

-eval filename  #命令行中执行

# 加载脚本返回sha1码
SCRIPT LOAD "return 'hello world'"

# 由加载脚本返回的sha1码执行脚本
EVALSHA "232fd51614574cf0867b83d384a5e898cfd24e5a" 0 

# 清空缓存的脚本
SCRIPT FLUSH

# 杀死正在运行的脚本
SCRIPT KILL 

#########################数据类型#############################################

字符串 string
SET key value                 ###设置key和value
GET key                       ###由key的值获取value
DEL key                       ###删除key

哈希 hash  ###键值对的集合  字符串字段和字符串值之间的映射，所以它们用来表示对象
HSET key field1 value1
HMSET key field1 value1 field2 value2 field3 "value3_1 value3_2"  ###设置hash
HGETALL key                  ###获取hash
HSET key field4 value4       ###添加hash的值
HGET key field               ###获取key中对应field的值
HGET key field1 field2
HDEL key field 
HKEYS key
HLEN key
HEXIST key field             ##查看是否存在 



列表 list
LPUSH key value1             ###将一个或多个值 插入到列表头部
RPUSH key value              ###插入列表尾部
LRANGE key 0 5               ###查询0到5的元素    
LLEN key                     ###查询长度
LPOP key                     ###弹出头元素，即移除并显示头元素
RPOP key                     ###弹出尾元素
LSET key 0 value             ###设置已经存在的对应下标元素的值 
                             
                             
集合 set    值不能重复       
SADD key value1              ####往集合添加元素
SREM key member              ####移除集合中的元素
SMEMBERS key                 ###阻塞遍历
SSCAN key 0                  ###非阻塞遍历
SCARD key                    ###返回集合中元素的数量
SDIFF key1 key2              ###差集
SINTER key1 key2             ###交集
SUNION key1 key2             ###并集
SPOP key                     ###弹出一个随机值
                             
                             
有序集合 zset(SortedSet)     通过score排序 member唯一
ZADD zkey 6 member1          ## zadd key score member
ZADD zkey 5 member2            
ZRANGE zkey 0 100            ###获取排序列表，从第几个到第几个
ZRANGEBYSCORE zkey 0 100     ###获取排序列表，根据score过滤
ZCARD zkey                   ###查看集合的元素个数
ZREM zkey member1            ###移除元素
ZSCORE zkey member2          ###获取成员的值   
ZINCRBY zkey 2 member2       ###给成员的值增加，可以使用负数


SCAN  ##迭代当前数据库中的数据库键
SSCAN ##迭代集合键中的元素
HSCAN ##迭代哈希键中的键值对
ZSCAN ##迭代有序集合中的元素（包括元素成员和元素分值）


HyperLogLog  #基数统计 不保存key值，只保存hash值，每个 HyperLogLog 键只需要花费 12 KB 内存

PFADD key "v1" "v2"
PFCOUNT key
PFADD key1 "v2" "v3" "v4"
PFMERGE key1 key             #将key的合并到key1，不影响key的数据


存储地理位置信息 >=3.2
geoadd              # 添加地理位置的坐标
geopos              # 获取地理位置的坐标
geodist             # 计算两个位置之间的距离
georadius           # 根据用户给定的经纬度坐标来获取指定范围内的地理位置集合
georadiusbymember   # 根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合
geohash             # 返回一个或多个位置对象的 geohash 值


Stream 持久化的消息队列 >5.0       

消息队列相关命令：

XADD                # 添加消息到末尾
XTRIM               # 对流进行修剪，限制长度
XDEL                # 删除消息
XLEN                # 获取流包含的元素数量，即消息长度
XRANGE              # 获取消息列表，会自动过滤已经删除的消息
XREVRANGE           # 反向获取消息列表，ID 从大到小
XREAD               # 以阻塞或非阻塞方式获取消息列表

消费者组相关命令：

XGROUP CREATE       # 创建消费者组
XREADGROUP GROUP    # 读取消费者组中的消息
XACK                # 将消息标记为"已处理"
XGROUP SETID        # 为消费者组设置新的最后递送消息ID
XGROUP DELCONSUMER  # 删除消费者
XGROUP DESTROY      # 删除消费者组
XPENDING            # 显示待处理消息的相关信息
XCLAIM              # 转移消息的归属权
XINFO               # 查看流和消费者组的相关信息；
XINFO GROUPS        # 打印消费者组的信息；
XINFO STREAM        # 打印流信息



KEYS SMEMBERS 等在数据量较大时不安全，因为redis是单线程，会造成阻塞

scan 循环迭代 更安全 只保证单次查询的key存在

scan 0  #开始查询 

#通过迭代查询获取全部结果 返回值的第一个为下一次迭代游标 当下一次迭代游标为0即表示迭代结束


scan 0 match log* count 10000

match 匹配
count 单次用于查询的key的数量 不是返回值的数量

redis通配符 keys match 可以使用
*    任意多个字符
?    单个字符
[ ]  括号内的某个字符

#CAS(check and set)

