PIRT(point-in-time-recovery，基于时间点的恢复，即恢复到指定时间点)
全备
整个实例全备，在备份时加--oplog参数，参数并不是指导出oplog，而是确保当前的备份不受实例的操作影响(即备份时实例有写操作)，当前的备份能反映当前实例的状态，因此才可以用于PITR。

全备示例
bin/mongodump --host 127.0.0.1:27017 --oplog -o full_backup_dir

备份oplog
oplog是记录mongodb的操作，类似于mysql的binlog，可用于数据的时间点恢复。oplog是固定大小，默认为磁盘的5%。可以通过设置参数--oplogSize调整。
以mongod -master启动时，oplog为local库下的oplog.$main。
对于副本集，oplog为local库下oplog.rs。


备份oplog示例
bin/mongodump --host 127.0.0.1:27017 -d local -c 'oplog.$main' -o oplog_backup_dir
或者
bin/mongodump --host 127.0.0.1:27017 -d local -c 'oplog.rs' -o oplog_backup_dir

将oplog备份得到的oplog.rs.bson替换【mongodump --oplog】备份目录backup_path中的oplog.bson，即可使用backup_path进行PITR
也可以直接指定用 oplog.rs.bson 文件前滚	


恢复
将备份oplog所得的oplog.$main.bson文件替换全备目录下的oplog.bson，然后使用mongorestore恢复。
oplog只能前滚，即只能应用全备之后的事务。
oplogLimit 给定的时间戳之前的才应用，不包含给定的时间戳

PITR恢复示例
bin/mongorestore --host=127.0.0.1:27017 --oplogReplay --oplogLimit=1504721747 full_backup_dir

#oplogLimit的值为时间戳，即为要将整个实例恢复到的时间点。


分片(sharding)
单个分片分别备份与恢复，方式为单实例、副本集其中的一种。


mongodump  
通过oplog实现备份的一致性，不阻塞其他写操作  
只需要确保oplog保留时间大于备份间隔，备份时加oplog参数即可实现pitr。恢复时上一全备用下一备份的oplog备份。

#只备份还原执行库/表
-d, --db=<database-name>           
-c, --collection=<collection-name> 



#复制文件实现备份  
#副本集时在SECONDARY加锁不影响PRIMARY的写操作 在PRIMARY操作会阻塞其他连接的写
db.fsyncLock()      //加锁
                    //复制data目录
db.fsyncUnlock()    //释放锁


sharding架构

https://www.mongodb.com/docs/manual/tutorial/backup-sharded-cluster-with-database-dumps/
4.2以及之后的版本不能用mongodump逐个备份分片实现全局一致备份

4.0以及之前需要先关闭balancer再逐个分片备份
use config
sh.stopBalancer()


sharding架构的其他备份方式
https://github.com/Percona-Lab/mongodb_consistent_backup

