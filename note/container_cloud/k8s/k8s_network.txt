1、启动pod（用pod、deploy方式）
2、设置svc绑定pod
3、设置ingress域名绑定svc
4、外部dns设置域名解析到任意一个node（或者再做一层nginx对多个node进行负载均衡，然后域名解析到这个nginx，通过nginx转发给node）
5、通过域名即可访问pod的应用



Calico  容器、虚拟机、宿主机之间的网络连接


coredns    svc使用    只需要启动coredns的pod即可



#网络相关 services    通过apply yaml创建，通过selector指定绑定的app（先由控制器启动pod）
#查看网络
kubectl get svc

#端口转发
kubectl get svc -o wide

通过创建svc，不同的容器可以通过name访问




ClusterIP         默认分配的网络
LoadBalancer      映射到LoadBalancer的端口
NodePort          映射到物理机的端口（不推荐使用，因为物理机的ip可能会变） nodeIP:nodePort 运行容器的ip、容器暴露/映射的端口

# entpoint
container_cloud/k8s/k8s_network.txt




常用的Ingress控制器有：
Nginx Ingress Controller
Traefik
Kong


反向代理与负载均衡



Ingress配置通过主机名称(example.com)和路径名(/app1和/app2)，将外部请求路由到两个服务(app1-service和app2-service)上

# example_ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ingress
spec:
  rules:
    - host: example.com                             
      http:
        paths:
          - path: /app1
            pathType: Prefix
            backend:
              service:
                name: app1-service
                port:
                  number: 80
          - path: /app2
            pathType: Prefix
            backend:
              service:
                name: app2-service
                port:
                  number: 80



#应用到Kubernetes集群中：
kubectl apply -f <yaml-file-name>

# 查看已应用的Ingress对象：
kubectl get ingress


kubectl get pods -A | grep ingress    

# 每个node运行一个ingress的pod，即一个nginx进程

创建一个ingress资源即增加一条nginx的配置
通过域名访问到nginx，nginx则由域名转到对应的服务（原理为通过server_name确定是要配置哪个配置）
