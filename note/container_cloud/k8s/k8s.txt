
#列出所有API资源 即如 nodes pods namespaces 等所有资源的名字
kubectl api-resources


#查看命名空间  默认命名空间的容器 default
kubectl get namespaces   
kubectl describe namespace <namespace-name>

get describe 对所有API资源都生效

# 查看命名空间下的所有资源
kubectl get all -n <namespace-name>

#获取所有节点（即物理机器）
kubectl get node
kubectl get nodes -o wide
#获取节点详细信息
kubectl describe node <node-name>
#获取node下的所有pod
kubectl get pods -A -o wide --field-selector spec.nodeName=<node-name>

kubectl get deploy -A


-A          # 所有命名空间
-o          # 输出格式 -o wide ：输出包含网络信息 -o yaml ：输出运行使用的yaml配置
-w          # 持续输出
-n          # 指定命名空间


#################################################################pod
#创建pod 一个pod可以包含多个容器 共享物理资源
kubectl apply -f my-pod.yaml


#获取pod的信息
kubectl get pods -A

#持续输出pod信息
kubectl get pods -o wide -w

#列出指定命名空间的容器
kubectl -n test get pods
kubectl -n test get pods -o wide


#获取pod的详细信息
kubectl describe pod <pod-name>

#删除pod
kubectl delete pod <pod-name>


#查看 stdout 日志
kubectl logs <pod-name>

#类似tail -f
kubectl logs -f <pod-name>


#文件复制 可以复制出或者复制入
kubectl cp <pod-name>:/bitnami/mysql/x.sql ./
kubectl cp <pod-name>:$pwd $dir


#进入pod命令行
kubectl -n test exec -it <pod-name> -- bash

-c <container-name>   # 如果省略，则默认为第一个容器，当一个pod有多个容器时应该指定这个值


kubectl exec (POD | TYPE/NAME) [-c CONTAINER] [flags] -- COMMAND [args...] [options]


#列出当前pod使用的镜像
kubectl get pods -o=custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[*].image -A


