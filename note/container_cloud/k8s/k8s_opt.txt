kubectl apply -f my-deployment.yaml            # 对docker镜像的部署，即先有打包成docker镜像存在于仓库。不存在则创建；已经存在则更新

kubectl create -f my-deployment.yaml           # 不存在则创建；已经存在则报错

kubectl delete -f my-deployment.yaml
kubectl delete deployment <deployment-name>    # 完全关闭，慎用，只关闭应用时可通过kubectl scale操作代替       

kubectl edit deploy <deployment-name>          # 修改deploy的image字段实现发布新镜像，保存后即发布

kubectl delete pod <pod-name>                  # 删除pod  `restartPolicy: Always`时则重新拉起pod


kubectl scale --replicas=0 -n $namespace deployment/$deploymentname   # 一种关闭pod的方法，关闭应用进程；pod关闭后，再调整为非零即可实现重启。
kubectl scale --replicas=0 -n $namespace deploy $deployname


kubectl top pod
kubectl top pod -n $namespace
kubectl top pod -n $namespace $podname                                # 查看指定pod的物理资源使用情况，即对pod执行top命令

kubectl top node

# 回滚                                                                               # 
kubectl rollout history -n $namespace deploy $deployname                       # 查看以前上线的修订版本
kubectl rollout history -n $namespace deploy $deployname  --revision=1         # 
                                                                               # 
kubectl rollout undo -n $namespace deploy $deployname                          # 回滚到先前的版本
kubectl rollout undo -n $namespace deploy $deployname --to-revision=2          # 默认to-revision=0
                                                                               #
kubectl rollout status -n $namespace deploy $deployname                        # 检查滚动更新状态
                                                                               #
kubectl rollout restart -n $namespace deploy $deployname                       # 重启


kubectl api-resources 可以查看 kind 字段

--- 是指令的结束标记，可以通过该指令在同一个yaml文件中描述多个资源（k8s特殊用法，不是yaml标准）


images 字段
即对应一个docker镜像



     



