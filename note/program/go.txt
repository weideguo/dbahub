编译 编译的文件头部必须为 package main
go build my_go_program.go
编译动态库
go build --buildmode=plugin plugin.go
编译多个文件
go build file1.go file2.go……
编译目录下所有文件
go build

编译并运行
go run my_go_program.go

#移除当前源码包和关联源码包里面编译生成的文件
go clean
#只列出如何清理 但不执行
go -n clean 

下载第三方包 使用git
go get -u github.com/go-sql-driver/mysql

运行测试 *_test.go文件的TestXXX函数
#运行当前文件夹下所有*_test.go
go test -v
#运行指定*_test.go
go test -v user_test.go  user.go
#文件夹里还包含文件夹
go test -v ./...

#测试代码覆盖率 当前文件夹
go test -v -coverprofile cover.out

格式化代码文件，统一风格
go fmt
gofmt

编译并安装
go install
export GOPATH=XXX
GOPATH
   ├── bin    生成的可执行文件，名称来自于编译时的包名。
   ├── pkg    编译期间的中间文件
   └── src    在这个目录下运行go install d1/d2 最后的目录下的文件引用main

查看GOPATH
go env GOPATH

#查看命令的说明
go help build 
go help run
go help clean

跨平台编译
#windows编译linux的可执行文件
set GOARCH=amd64                #设置目标可执行程序操作系统构架，包括 386，amd64，arm
set GOOS=linux                  #设置可执行程序运行操作系统，支持 darwin，freebsd，linux，windows
#linux编译windows的可执行文件
export GOARCH=amd64      
export GOOS=windows      
go build ./main.go       


go env        #列出go的环境变量
#设置代理
go env -w GOPROXY=https://goproxy.cn,direct   
export GOPROXY=https://goproxy.cn             #只能用于linux

go generate
# 运行在代码中以下格式注释指定的命令
//go:generate go env -w GO111MODULE=on


#go mod管理依赖包 项目创建样例（项目可以在任意位置创建）
#之后源代码中依赖的第三方包不需要再提前下载到GOPATH，运行时如果缺失会自动从GOPROXY下载
export GOPATH=XXX    #依然需要先设置GOPATH变量
go env GOPATH        #查看GOPATH

mkdir myGoProject 
cd myGoProject 

go mod init github.com/weideguo/myGoProject  #初始化当前文件夹，go.mod文件

#在代码中通过 import 引入依赖包
```go
import (
    "fmt"                                              #引入标准库
    
    "github.com/gin-gonic/gin"                         #依赖第三方包 ，运行时自动下载
    
    "github.com/weideguo/myGoProject/myutils"         #引入自己的包，即当前目录下存在myutils，import时需要在目录前加上完整项目名（go.mod中指定）
)

```

go build main.go          #第一次编译运行时生成go.sum，记录下载的模块（下载到$GOPATH/pkg/mod目录）
#go build main.go         



#####没有 go.mod 整个项目需要放在 $GOPATH/src 目录下（否则引用可能会出现路径问题）


###################################################
import 引用的位置

1.$GOROOT/src                 //标准库   默认为安装go的根目录，安装go时自带
2.$GOPATH/src                 //第三方库 需要自己下载  
3.$GOPATH/pkg/mod             //第三方库 编译时自动下载    （所有目录不存在时才下载，go1.13之后）
4.当前目录下的目录            //自己的模块 旧版支持使用相对位置引用；新版本使用go.mod管理引用
5.当前目录下的vendor目录      //第三方库 当前目录需要处于$GOPATH/src目录下（可以处于任意深度） 


##########################

go.mod    #go mod init 生产文件
go.sum    #go run/build 由 go.mod 生产，并下载对应依赖项



go mod download    下载依赖的module到本地cache（默认为$GOPATH/pkg/mod目录）
go mod edit        编辑go.mod文件
go mod graph       打印模块依赖图
go mod init        初始化当前文件夹, 创建go.mod文件
go mod tidy        增加缺少的module，删除无用的module
go mod vendor      将依赖复制到当前的vendor目录下
go mod verify      校验依赖
go mod why         解释为什么需要依赖


go work            

go work init myWorkSpace                                                 # 创建go.work文件
cd myWorkSpace/myGoProject && go mod init example.com/myGoProject        # 在myWorkSpace下创建项目myGoProject

cd myWorkSpace
go work use ./myGoProject                                                # 通过这种方式引入包，可以指定依赖包位于当前目录下 
go work use ./ABC                                                        # 假设项目中需要这个包，下载于当前目录，通过这种方式指定依赖包位置
                                                      
go run example.com/myGoProject                                           # 在myWorkSpace运行依赖于go.work文件，只能调试运行？


####godep来管理目录  #旧版本go使用 新项目使用go mod代替（go1.13之后）
godep save     将依赖项输出并复制到Godeps.json文件中
godep go       使用保存的依赖项运行go工具
godep get      下载并安装具有指定依赖项的包
godep path     打印依赖的GOPATH路径
godep restore  在GOPATH中拉取依赖的版本
godep update   更新选定的包或go版本
godep diff     显示当前和以前保存的依赖项集之间的差异
godep version  查看版本信息





#设置CPU核心使用数量
func main(){
runtime.GOMAXPROCS(3)
}


Read-Eval-Print-Loop 环境
yaegi
gomacro



# 性能分析
# 在头部
import _ "net/http/pprof"


# 可以通过页面查看或者用 pprof 工具分析
http://my_host:my_port/debug/pprof


# 常驻内存占用情况
go tool pprof -inuse_space http://my_host:my_port/debug/pprof/heap
# 内存临时分配情况
go tool pprof -alloc_objects http://my_host:my_port/debug/pprof/heap

# CPU耗时分析
go tool pprof http://my_host:my_port/debug/pprof/profile

# goroutine泄露分析
/goroutine

# 锁耗时分析
/mutex

# goroutine阻塞等待分析
/block


# 交互命令
top 
traces [函数] 
list [函数]

