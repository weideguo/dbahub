堆 heap
堆中父节点的值总是不大于或小于子节点
堆是一棵完整树
根节点最大称为最大堆或大根堆


JVM参数
整个JVM内存= 堆内存（主要内存占用） + 持久代（方法区） + 栈内存
堆内存=年轻代 + 年老代
栈内存=Java虚拟机栈 + 本地方法栈

-Xms1024m                           //堆初始内存
-Xmx1024m                           //堆最大内存
-Xss1M                              //每个线程的堆栈大小
                                    
-Xmn512m                            //年轻代大小 >=1.4
-XX:NewRatio=4                      //设置年轻代与年老代的比值。设置为4，则年轻代与年老代所占比值为1:4，年轻代占整个堆栈的1/5
-XX:MetaspaceSize=512M              // >=1.8 代替持久代
-XX:MaxMetaspaceSize=512M           // 
                                    
-XX:PermSize=512M                   //持久代初始参数 <=1.7 
-XX:MaxPermSize=512m                //设置持久代大小 <=1.7
-XX:NewSize=512m                    //年轻代初始大小(for 1.3/1.4)
-XX:MaxNewSize=512m                 //年轻代最大值(for 1.3/1.4)
                                    
                                    
-XX:+UseG1GC                        // >=9 不再单独管理年轻代、年老代、持久代
-XX:MaxDirectMemorySize=512m        // 直接内存/堆外内存最大值

```
import sun.nio.ch.DirectBuffer;

import java.nio.ByteBuffer;

public class TestDirectByteBuffer {
    public static void main(String[] args) throws Exception {
        // 堆内内存由jvm管理 即启动时的 Xms Xmx
        // 堆外内存由操作系统分配、回收
        // 堆外内存申请
        ByteBuffer buffer = ByteBuffer.allocateDirect(10 * 1024 * 1024);
    }
} 
```
