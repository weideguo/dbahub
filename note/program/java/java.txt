RMI
remote method invocation

基础设施
DTO  Data Tranfer Object  
Service

J2EE
	EJB
		session bean
		entity bean
		messageDriver bean
	jsp
	servlet

J2SE 
	SSH
		Struts
		Spring
		Hibernate

	
前端		jsp+js（jQuery、Ext）
后端		servlet
			业务逻辑层  
				CRUD（create、retrieve、update、delete）
			orm
			DB			



#环境变量
export JAVA_HOME=/data/jdk1.8.0_191
export PATH=$JAVA_HOME/bin:$PATH
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar



命令行编译和使用
javac命令 
如果依赖多项java文件，一起放入即可
-d 输出文件的根位置 不必加入package之后的路径
javac -d x:\root\bin -cp x:\root\lib x:\root\src\com\carnation\wdg\HelloEx.java x:\root\src\com\carnation\wdg\Function.java


java命令
java -Djava.ext.dirs=x:\root\lib -cp x:\root\bin\ com.carnation.wdg.HelloEx

java -Djava.ext.dirs=/data/lib -cp /data/xxx.jar com.carnation.wdg.HelloEx

#javac java
-Djava.ext.dirs中配置多个目录。使用冒号分隔（windows下使用分号）

-cp -classpath
java -classpath $dir $classname
指定运行时使用的jar/class文件的目录，多个使用":"分隔，类名只要在任意一个jar/class文件中即可
跟CLASSPATH环境变量指定方式一致，-classpath会覆盖环境变量

-D<name>=<value>
System.getProperty(<name>);         //java中获取执行时-D传入的参数


运行jar中的类
java -cp App.jar com.amar.Main


直接运行jar 需要 在 MANIFEST.MF 中指定 Main-Class
java -jar path_name/file_name.jar


三个系统类加载器，加载类的顺序：
Bootstrap CLassloder                     加载$JAVA_HOME/jre/lib 目录下的jar、class        可以在运行时 -Xbootclasspath 覆盖指定
Extention ClassLoader（ExtClassLoader）  加载$JAVA_HOME/jre/lib/ext 目录下的jar、class    可以在运行时 -Djava.ext.dirs 覆盖指定
AppClassLoader                           加载$CLASSPATH 目录下的jar、class                可以在运行时 -Djava.class.path -cp -classpath 覆盖指定


-java.library.path
加载链接库文件的路径


jar命令
----创建jar包
----使用java编译好的class文件
jar命令格式：
jar {c t x u f }[ v m e 0 M i ][-C 目录] 文件名
 
{ctxu}这四个参数必须选选其一。[v f m e 0 M i ]是可选参数，文件名也是必须的
-c 创建一个jar包
-t 显示jar中的内容列表
-x 解压jar包
-u 添加文件到jar包中
-f 指定jar包的文件名
-v 生成详细的报造，并输出至标准设备
-m 指定manifest.mf文件
-0 产生jar包时不对其中的内容进行压缩处理
-M 不产生所有文件的清单文件(Manifest.mf)。这个参数与忽略掉-m参数的设置
-i 为指定的jar文件创建索引文件
-C 表示转到相应的目录下执行jar命令，相当于cd到那个目录，然后执行jar命令

manifest.mf
冒号后要有空格，最后一行为空
指定java运行jar包时的主类及其他

jar cvfm test1.jar ./META-INF/MANIFEST.MF test1.class


代码中
import可以调用不同目录层次的class文件，以及调用jar包的类
引入的路径与class文件的路径相关



ANT
使用xml文件设置操作步凑
用于调用javac,jar等命令编译与打包jave文件
类似于make

ant -buildfile build.xml build   ///build对应xml文件中target节点的name


maven
使用pom.xml文件描述依赖的jar包，同时描述下载的源
mvn validate	验证项目	验证项目是否正确且所有必须信息是可用的
mvn compile	    执行编译	源代码编译在此阶段完成
mvn test	    测试	    使用适当的单元测试框架（例如JUnit）运行测试。
mvn package	    打包	    创建JAR/WAR包如在 pom.xml 中定义提及的包
mvn verify	    检查	    对集成测试的结果进行检查，以保证质量达标
mvn install	    安装	    安装打包的项目到本地仓库，以供其他项目使用
mvn deploy	    部署	    拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程


#镜像源 优先级
conf/setting.xml       #maven安装目录
~/.m2/setting.xml      #用户家目录
.mvn/                  #工程目录


#maven仓库
https://mvnrepository.com/



REST/RESTful
REpresentation State Transfer
将web服务视为资源，可由URL唯一标识
依赖于http协议


SOAP
Simple Object Access Protocol
简单对象访问协议
交换数据的一种协议规范，基于XML

JMS
Java Message Service






字节码 Byte Code

指令码 Instruction Code
硬件处理器平台可以直接执行

java字节码(编译后的class文件)由即时编译器(JIT complier, just in time complier )转换成处理器的指令


动态类型语言(Dynamically Typed Language)
在运行期间检查数据的类型
不会给变量指定类型，而是在赋值时得到数据类型。

静态类型语言(Statically Typed Language)




反射 reflect
可以实现
1、反编译：.class-->.java
2、通过反射机制访问java对象的属性，方法，构造方法等
3、运行时动态加载需要的加载的对象

例子：
实例化一个 person()对象， 不使用反射， new person(); 如果想变成 实例化 其他类， 那么必须修改源代码，并重新编译。
使用反射： Class.forName("person").newInstance()； 而且这个类描述可以写到配置文件中，如 **.xml， 这样如果想实例化其他类，只要修改配置文件的“类描述”就可以了，不需要重新修改代码并编译。

Class.forName("com.mysql.jdbc.Driver");      // 数据库连接驱动加载  如果直接使用new创建，则不便于在编译后通过配置文件动态设置加载哪个



工程实践
分模块编译成jar包，主模块通过jar包引用其他模块，实现模块编写/编译解耦



jps -v                                         # 查看jvm启动的参数
jmap $pid                                      #
jmap -heap $pid                                # 打印堆概要信息
jmap -histo $pid                               # 列出class对象数目、使用内存情况
jmap -histo:live $pid                          # 只统计活着的对象
jmap -dump:format=b,file=./app.dump  $pid      # 设置发生oom时自动进行dump -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/app.dump
jhat app.dump                                  # 查看导出的dump文件

jstack $pid                                    # 堆栈跟踪
jstat -gccause $pid                            # GC相关信息

