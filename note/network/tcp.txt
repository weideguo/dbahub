TCP
在TCP层，有个FLAGS字段，这个字段有以下几个标识：

SYN 建立连接        synchronous                    
FIN 关闭连接        finish                   
ACK 响应            acknowledgement                    
PSH 有DATA数据传输  push                    
RST 连接重置        reset                   
URG 紧急            urgent



出现SYN、SYN+ACK，建立了一个连接
出现FIN、RST、FIN+ACK，断开了连接
PSH为1的情况，一般只出现在DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。

SYN/FIN的传输虽然没有data，但是会让下一次传输的packet seq增加一，即本次发送的Ack需要加一
ACK的传输，不会让下一次的传输packet加一。结束断开除外。


Seq Sequence number    顺序号     表示的是我方（发送方）这边，这个packet的数据部分的第一位应该在整个data stream中所在的位置
Ack Acknowledge number 确认号     表示的是期望的对方（接收方）的下一次sequence number是多少。

Seq=对方的上一个Ack        握手时为0 
Ack=对方的上一个Seq+n      传输数据时，加上接收到的对方携带应用层数据的长度；在握手和结束时为1
不需要每个包都回应，但回应应该可以确认已经接受的包，即一个回应可以因其Ack值确认多个发送包。


TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。

#三次握手，发起连接  
                                                             
[SYN](Seq=0)      ---------------->                          # 源端发起连接请求，第一次发起连接时的Seq=0
                  <--------------- [SYN,ACK](Seq=0,Ack=1)    # 目的端回请请求，回应的seq应该与请求的Ack相同，Ack=对方的上一个Seq + 1
[ACK](Seq=1,Ack=1)---------------->                          # 源端确认目的端的回应，Seq=自己的上一个Seq + 1=对方的上一个Ack


#四次挥手，断开链接

[FIN]---------------->                                       # A请求断开
     <----------------[ACK]                                  # B确认A的断开
     <----------------[FIN]                                  # B请求断开
[ACK]---------------->                                       # A确认B的断开



