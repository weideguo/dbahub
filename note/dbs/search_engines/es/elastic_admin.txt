es使用全文索引

get /_cat                            #列出_cat下所有操作

GET /_cluster/health                 #查看集群状态
GET /_cat/health?v                   #查看集群状态

GET /_cat/nodes?v                    #查看节点的状态
节点即对应一个es进程
分片和复制（shards & replicas） 
Elasticsearch 没有采用节点级别的主从复制，而是基于分片。只能创建索引的时候静态设置。


get /_cat/shards                     #查看分片状态 为UNASSIGNED这表示为未分配

绿色，表示集群所有主分片和副本分片都可用，集群处于最健康的状态。
黄色，表示所有的主分片均可用，但存在不可用副本分片。此时，搜索结果仍然是完整的，但集群的高可用性在一定程度上受到影响，数据面临较高的丢失风险。
红色，表示至少一个主分片以及它的全部副本分片均不可用。集群处于红色状态意味着已有部分数据不可用，搜索只能返回部分数据，而分配到丢失分片上的请求会返回异常。

黄色则设置副本为0，恢复后再修改成其他值

红色修复

# 查看有问题的分片
GET /_cluster/allocation/explain?pretty

# 重新设置路由
POST /_cluster/reroute?retry_failed=true

# 手动设置路由（可能存在数据丢失）
POST _cluster/reroute
{
  "commands": [
    {
      "allocate_stale_primary": {
        "index": "example_index",             # 有问题的索引 
        "shard": 2,                           # 有问题的分片
        "node": "reading_10.0.0.1_node2",     # es节点
        "accept_data_loss": true
      }
    }
  ]
}

# 强行拉起分片（存在数据丢失）
POST _cluster/reroute?pretty
{
    "commands": [
        {
            "​​​allocate_empty_primary​​​": {
                "index": "example_index",
                "shard": 2,
                "node": "reading_10.0.0.2_node2",
                "accept_data_loss": true
            }
        }
    ]
}



GET _node                            #查看节点信息
GET _settings                        #查看全部索引的状态信息
GET _cluster/stats                   #集群的统计信息 索引、节点


Hot-Warm 冷热架构（高频访问索引放于热节点，低频访问索引放于冷节点）

# 查看节点属性
GET _cat/nodeattrs?v

# 只要特定字段，排序 
GET _cat/nodeattrs?v&h=node,attr,value&s=attr:desc


# 设置索引的冷热
PUT hot_warm_test_index/_settings
{
    "index.routing.allocation.require.temperature": "hot"                  
}


# 磁盘空间超过90%会自动设置所有索引只读
# 只读解锁 即设置所有索引的相关属性
curl -XPUT -H "Content-Type: application/json" http://ip:9200/_all/_settings -d '{"index.blocks.read_only_allow_delete": "false"}'

PUT /_all/_settings 
{
    "index.blocks.read_only_allow_delete": "false"
}



# vim elasticsearch.yml
cluster.name: myhost                   #
node.name: es-master1.myhost.com       #
node.master: true                      # 为主节点
node.data: false                       # 设置不存数据，因此只存储集群相关的元数据
discovery.zen.ping.unicast.hosts: ["es-master1.myhost.com:9300","es-master2.myhost.com:9300","es-master3.myhost.com:9300","es-hot1.myhost.com:9300","es-hot2.myhost.com:9300","es-hot3.myhost.com:9300","es-warm1.myhost.com:9300","es-warm2.myhost.com:9300"]            #主节点需要设置所有节点，其他节点只需要设置主节点

# 在配置文件设置节点的冷热属性
node.attr.hotwarm_type: hot　　　      # 标识为热数据节点　



cluster.routing.allocation.disk.watermark.low:  85%             # 不会将分片分配给磁盘使用率超过该值的节点
cluster.routing.allocation.disk.watermark.high: 90%             # 将分片从磁盘使用率高于该值的节点中重新定位
cluster.routing.allocation.disk.watermark.flood_stage: 95%      # 达到该值则会对索引加只读锁




GET _cluster/settings

# 设置集群分片自动平衡
PUT _cluster/settings
{
 "persistent":{
   "cluster.routing.allocation.enable": "all",
   "cluster.routing.rebalance.enable": "all",
 }
}


# 删除es节点，将上面的分片迁移到其他节点
PUT _cluster/settings
{
  "transient": {
    "cluster.routing.allocation.exclude._ip": "10.0.0.1"
   }
}


# 查看分配过程
GET _cat/allocation?v
