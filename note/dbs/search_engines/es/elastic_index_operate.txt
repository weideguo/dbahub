数据库（database）	索引（indices）
表（tables）	    types
行（rows）	        documents            一个文档是一个可被索引的基础信息单元
字段（columns）	    fields               


文档的内部字段
_index      索引名
_type       恒为_doc
_id         id，创建时不指定则自动生产
_score      查询的匹配值（如 词频/逆向文档频率（TF/IDF）），用于排序结果集
_source     文档实际值
        
        

#kibana console中操作

#列出所有索引
GET _cat/indices

#查看indices的信息
GET ${indice}

#查看indices的数据 只返回部分
GET ${indice}/_search

#分页
#
from
size

#
scroll=5m   #_scroll_id缓存5分钟 返回_scroll_id，下一次使用该值滚动



#使用id查询indices的数据
GET ${indice}/_doc/${_id}

#查询indices的文档数
GET _cat/count/${indice}?v

#全文搜索
GET ${indice}/_search?q=${condition}

#指定字段搜索
GET ${indice}/_search
{
    "query": {
        "multi_match" : {
            "query" : "${condition}",
            "fields": ["${field1}", "${field2}"]
        }
    }
}



#单字段
{
  "query":{
    "term":{
      "_id": 100000100
    }
  }
}

#单字段
{
  "query":{
    "match":{
      "_id": 100000100
    }
  }
}

#term是不分词（不拆分搜索字）查找目标字段中是否有要查找的文字
#match是分词（拆分搜索字）查找目标字段

#多字段
{ 
  "query": { 
    "bool":{ 
      "should":{
        "match":{ "count_date":"2021-02-04" } 
      }, 
      "must": {
        "term":{ "channel_name": "xxx" } 
      }
    } 
  } 
}

#多字段
{ 
  "query": { 
    "bool":{ 
      "should":[
        { "match": { "count_date": "2021-02-04" }}
      ],
      "must":[
        { "match": { "channel_name": "xxx" }}
      ]
    } 
  } 
}


#多字段
{ 
  "query": { 
    "bool":{ 
      "must":[ 
        {"term":{ "count_date":"2021-02-04" } },
        {"term":{ "channel_name": "xxx" } }
      ]
    } 
  } 
}

# must      返回的文档必须满足must子句的条件，并且参与计算分词
# filter    返回的文档必须满足filter子句的条件，不参与计算分词
# should    返回的文档可能满足should子句的条件。在一个Bool查询中，如果没有must或者filter，有一个或者多个should子句，那么只要满足一个就可以返回。minimum_should_match参数定义了至少满足几个子句。
# must_not  返回的文档必须不满足must_not定义的条件。


#正则
{
  "query": {
    "regexp": {
      "postcode": "W[0-9].+" 
    }
  }
}

#范围
{
  "query":{
    "range" : {
      "age" : {"gte" : 10,"lt" : 20 }
    }
  }
}



########创建
#创建一篇文档，同时指定_id
PUT test/_doc/2
{
  "name":"aaa",
  "age":27,
  "desc":"AAA"
}

#创建一篇文档，不指定_id会自动生成
POST test/_doc
{
  "name":"bbb",
  "age":27,
  "desc":"AAA"
}



#######删除
#删除整个索引
DELETE test

#使用通配符删除多个索引
DELETE *test*

curl -XDELETE http://$localhost:9200/*test*

#按条件删除
POST test/_delete_by_query   
{
  "query":{
    "term":{
      "_id": 100000100
    }
  }
}



#########http操作
curl -XGET "http://$localhost:9200/_cat/health"
curl -XGET "http://$localhost:9200/_cat/health?v"



#列出所有索引
curl "http://$localhost:9200/_cat/indices?v=true"



