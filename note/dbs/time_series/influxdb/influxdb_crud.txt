show tag keys from tb_name;
show tag values from tb_name with key="xxx"

show field keys from tb_name;

tags   有索引
fields 无索引
point  记录
series 

show series on <database> from <measurement>

tb_name,tag1=v01,tag2=v02,...
tb_name,tag1=v11,tag2=v12,...


表名存在特殊字符使用双引号包起来

完整的表名格式
"db_name".."measurement_name"
"db_name"."schema_name"."measurement_name"

SHOW RETENTION POLICIES     可以按照schema设置保留时间，即对应schema

DROP RETENTION POLICY <retention_policy_name> ON <database_name>

ALTER RETENTION POLICY <retention_policy_name> ON <database_name> DURATION <duration> REPLICATION <n> [SHARD DURATION <duration>] [DEFAULT]


shardGroupDuration 根据这个值自动shard

# 创建RP/schema
CREATE RETENTION POLICY "my_rp" 
ON "my_db" 
DURATION 365d REPLICATION 1;

# 修改默认的RP/schema
ALTER RETENTION POLICY "my_rp" 
ON "my_db" DEFAULT

# 查询
select * from tb_name order by time desc limit 10;


SELECT <field_key>[,<field_key>,<tag_key>] FROM <measurement_name>[,<measurement_name>]

#查看所有field
SELECT *::field FROM "h2o_feet"


SELECT_clause FROM_clause WHERE <conditional_expression> [(AND|OR) <conditional_expression> [...]]
# WHERE filters data based on fields, tags, and/or timestamps.


SELECT * FROM "h2o_feet" WHERE time > now() - 7d


# measurement不存在时自动创建，没有专门的创建语句
insert + measurement_name + "," + tag=value,tag=value + field=value,field=value


# 通过插入时设置时间，实现对数据的修改
INSERT pineapple value=1 '2015-08-18T23:00:00Z'
INSERT pineapple,fresh=true value=1 1439938800000000000


# 删除
DELETE FROM "cpu"
DELETE FROM "cpu" WHERE time < '2000-01-01T00:00:00Z'
DELETE WHERE time < '2000-01-01T00:00:00Z'


 TZ('Asia/Shanghai')


CRETE DATABASE WITH DURATION m REPLICATION 1 SHARD DURATION n;

DROP MEASUREMENT  "cpu";





CREATE CONTINUOUS QUERY <cq_name> ON <database_name>
BEGIN
  <cq_query>
END

语句中必须包含GROUP BY time()，一般用于 select into ，可以带有where
CQ的执行间隔跟GROUP BY time()一样，如GROUP BY time(1h)，时间范围只为当前时间到一个时间周期之前，不是所有数据。


WHERE time > now() - [N*interval]   # 持续查询加这样的条件过滤依旧是推荐？


SELECT 
count(tag1) AS tag2 
INTO "db1"."db1_90d"."measurement_name1" 
FROM "db2"."db1_90d"."measurement_name1" 
GROUP BY time(1h) 


# 表数据复制 
# 配合 drop measurement ... 实现表重命名
SELECT * INTO db_2..new_cpu FROM db_1..cpu group by *

