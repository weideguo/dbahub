在命令行中查询当前连接所用的字符集show variables like '%char%';

主要字符集参数说明
参数    参考文档中的解释    说明
character_set_client    The character set for statements that arrive from the client.    客户端传输语句到服务端所用的字符集。
character_set_connection    used for literals that do not have a character set introducer and for number-to-string conversion.    用于转换没有字符集引导头的字符串、数字到字符串的转换。
character_set_database    used by the default database.    显示当前所在数据库的默认字符集。动态参数，由mysql更改。不要手动修改。
character_set_results    used for returning query results such as result sets or error messages to the client.    用于返回结果或错误信息到客户端。
character_set_server    The server's default character set.    实例默认的字符集，创建数据库、创建表时如果不指定字符集，则使用默认字符集
character_set_system    used for storing identifiers. The value is always utf8.    用于存储标识符，恒为utf8。

三个关键参数character_set_client、character_set_connection、character_set_results
即影响实际数据存储、交互的字符编码。

mysql客户端字符编码修改，优先级由高到低：（以修改成utf8为例）
1.在mysql命令行中执行【set names utf8;】
等同于三个命令【set character_set_client=utf8】、【set character_set_connection=utf8】、【set character_set_results=utf8】。

2.进入命令行时指定默认字符集：mysql --default-character-set=utf8  

3.mysql使用的配置文件中[client] [mysql] 块的参数default-character-set=utf8
 mysql默认配置文件优先级由低到高：【/etc/mysql/my.cnf】、【/etc/my.cnf】、【~/.my.cnf】

特殊情况
mysql在启动时使用参数skip-character-set-client-handshake
会导致【mysql --default-character-set=utf8】设置连接字符集不生效，但显示执行【set names utf8】还是会生效。这不影响程序(python、java)的客户端的连接字符集设置。




【表的编码】show create table 查看

终端字符串---> 【character_set_client】与【表的编码】转换  ----> 磁盘存储

磁盘存储-----> 【表的编码】与【character_set_results】转换 ----> 终端字符串






SHOW CHARACTER SET;   ---查看MySQL支持的字符集：
show collation;       ---查看排序字符集
编码属性：
character set        存储使用的字符集
collation            排序、对比使用的字符集
查看MySQL当前使用的字符集：
SHOW VARIABLES LIKE "characrer_set%"
SHOW VARIABLES LIKE "collation%"

--创建数据库时指定默认字符集：
CREATE DATABASE database_name DEFAULT CHARACTER SET char_set1 DEFAULT COLLATION char_set2;
--修改字符集
ALTER  DATABASE database_name CHARACTER SET char_set1 COLLATION char_set2;    --修改数据库默认的字符集：
alter table table_name convert to character set char_set1;                    --转换表的默认字符集，已有的数据会被转变，如果表的转换存储字符集不兼容，可能导致数据丢失
alter table table_name DEFAULT CHARSET=utf8;                                --To change only the default character set for a table
alter table table_name change column_name1 column_name1 blob;

alter table table_name convert to CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci; 

latin1     单字节编码
GBK     中文二字节，英文一字节
utf8    中文三字节，英文一字节


设置MySQL默认编码：配置文件中
[client]
default-character-set=utf8
[mysql]
default-character-set=utf8
[mysqld]    
character-set-server = utf8
collation-server = utf8_unicode_ci
init-connect='SET NAMES utf8'             #客户端连接的时候执行命令"set names utf8",也可以使其他命令,对super用户无效




collation_connection            #for comparisons of literal strings
collation_database              #动态参数，由mysql更改。不要手动修改。
collation_server                #默认排序规则




排序规则
utf8mb4_0900_ai_ci
uft8mb4 means that each character is stored as a maximum of 4 bytes in the UTF-8 encoding scheme.
0900    refers to the Unicode Collation Algorithm version. (The Unicode Collation Algorithm is the method used to compare two Unicode strings that conforms to the requirements of the Unicode Standard).
ai      refers accent insensitivity. That is, there is no difference between e, è, é, ê and ë when sorting.
ci      refers to case insensitivity. This is, there is no difference between p and P when sorting.



utf8mb4_0900_as_cs


utf8_bin             The binary (bin) collation blindly compares the binary value of characters (so it is case sensitive). 
utf8_unicode_ci      The unicode collations follows the Unicode standard for comparisons. 
utf8_general_ci      The general collation is faster but less correct than the unicode collation.


utf8_general_mysql500_ci  backward compatibility of old tables that used the old utf8_general_ci from before MySQL 5.1.24
utf8mb4_unicode_520_ci    as it offers the greatest number of characters that you can store, and it sorts characters in the most correct way possible



