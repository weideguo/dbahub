全量备份
#需要连接到数据库实例
./innobackupex --defaults-file=/u05/mysql5634/my.cnf --user=root --password=weideguo --host=127.0.0.1 --port=3307 --slave-info /u03/xb_backup_dir


对备份文件应用日志
#前滚提交的事务(redo)，回滚未提交的事务(undo)
./innobackupex --apply-log /u03/xb_backup_dir/2017-01-16_13-12-43


还原
#数据库实例需要关闭
#使用defaults-file确定还原路径
./innobackupex --defaults-file=/u05/mysql5634/my.cnf --copy-back /u03/xb_backup_dir/2017-01-16_13-12-43

./innobackupex --defaults-file=/u05/mysql5634/my.cnf --move-back /u03/xb_backup_dir/2017-01-16_13-12-43

##手动mv文件到对应目录更快 程序使用copy比较慢



增量备份(只对innodb有效，其他类型的全备)
#需要连接到数据库实例
#需要预先存在全量热备的文件夹/u03/xb_backup_dir/2017-01-16_14-54-07
#生成增量备份文件在/u03/xb_incre_backup_dir
./innobackupex --user=root --password=weideguo --host=127.0.0.1 --port=3307 --defaults-file=/u05/mysql5634/my.cnf --incremental --incremental-basedir=/u03/xb_backup_dir/2017-01-16_14-54-07 /u03/xb_incre_backup_dir 

--incremental-lsn=123456      #【--incremental-basedir】可由下xtrabackup_checkpoints的lsn代替指定

from_lsn  备份起始的lsn
to_lsn    备份覆盖的lsn  如果之后使用增量备份，则依赖于该lsn


增量备份  incremental backup
    基于上次全备以及其他增量备份的备份
    
    --incremental-basedir=<上一次全量或增量备份>

差异备份 differential backup
    只基于上次全备的增量备份
    
    --incremental-basedir=<上一次全备> 




应用日志

#对全备应用redo，全滚提交的事务
./innobackupex --apply-log --redo-only /u03/xb_backup_dir/2017-01-16_14-54-07
#对增量备份应用redo
./innobackupex --apply-log --redo-only /u03/xb_backup_dir/2017-01-16_14-54-07 --incremental-dir=/u03/xb_incre_backup_dir/2017-01-16_15-18-05

#对最后一个增量备份同时应用redo，undo
./innobackupex --apply-log /u03/xb_backup_dir/2017-01-16_14-54-07 --incremental-dir=$last_incremental_backup

#对全备应用redo，undo
./innobackupex --apply-log /u03/xb_backup_dir/2017-01-16_14-54-07



还原
./innobackupex --defaults-file=/u05/mysql5634/my.cnf --copy-back /u03/xb_backup_dir/2017-01-16_14-54-07


单表备份
#仅适用innodb表
./innobackupex --user=root --password=weideguo --host=127.0.0.1 --port=3307 --defaults-file=/u05/mysql5634/my.cnf --databases="dbname1.tablename1 dbname2.tablename2" /u03/xb_backup_dir

#--export 参数可以在恢复时生成可以接直接用于表空间还原的文件
./innobackupex --apply-log --export /u03/xb_backup_dir

还原
#创建相同结构的表
create table recovery_table_demo (..)
#抛弃表空间
alter table recovery_table_demo discard tablespace;
#复制备份的表空间文件到表所在的目录idb以及cfg文件（如果没有cfg会有告警 will attempt to import without schema verification）
#导入表空间
alter table recovery_table_demo import tablespace;

# 手动备份idb以及cfg
FLUSH TABLES tbl_name [, tbl_name] ... FOR EXPORT;

分区表可以单个分区导入
  | DISCARD PARTITION {partition_names | ALL} TABLESPACE
  | IMPORT PARTITION {partition_names | ALL} TABLESPACE
  

其他参数
--compact                 ###不备份secondary索引，压缩备份；应用日志时需要重建索引【--rebuild-indexes】，设置重建线程【--rebuild-threads=n】

--stream                 ###流备份

    --stream=tar ./ | gzip - > backup.tar.gz    #边备份边压缩。

--rsync                    ##对所有的非innodb表的数据文件使用一次复制（cp），而不是逐个文件；不能与【--stream】一起使用
    
--parallel=n               ##备份的线程数    
    
--slave-info               ##将【change master to ...】的信息备份存放在"xtrabackup_slave_info"文件中
--safe-slave-backup        ##备份时关闭sql_thread，备份结束后自动启动sql_thread

--compress                 ##单个文件压缩  增量备份也可以使用压缩 因为只是用checkpoint对比变化的page

原理
基于innodb crash-recovery机制
对于非事务类型的表，在备份innodb表后，使用lock tables for backup(percona特有，oracle版应该使用flush tables with read lock)，然后备份








2.X 引入了打包与压缩
#从文件中提取
./xbstream -x < /path_to_file -C /path_to_dir

#解压 需要先安装qpress
xtrabackup --decompress --remove-original ...

