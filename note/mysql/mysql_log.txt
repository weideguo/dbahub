mysqlbinlog         ----查看二进制文件以供备份


二进制日志
--用于复制
--用于恢复
sync_binlog         ---设置二进制日志同步到磁盘的频率，默认二进制日志不是实时同步到磁盘
log_bin             ---my.cnf设置二进制文件路径并启用二进制日志【log_bin=path_name】，设置后即启用
binlog_format       ---my.cnf设置二进制日志的记录格式【基于语句记录(Statement-Based Logging,SBL)、基于行格式记录(Row-Bbased Logging,RBL)、混合模式记录(Mixed-Based Logging,MBL)】
expire_logs_days    ---保存时间（天）

binlog-ignore-db=db1[,db2]      ---指定库不使用binlog
binlog-do-db=db1[,db2]          ---指定库使用binlog

--从库设置不复制，需要在启动命令行中添加                      
replicate-ignore-db              
replicate-do-db1              
replicate-wild-do-table            --可以使用通配符
replicate-wild-ignore              --    




--强制写日志
flush logs;
flush binary logs;

--手动删除二进制日志
PURGE BINARY LOGS TO 'mysql-bin.010';
PURGE BINARY LOGS BEFORE '2008-04-02 22:46:26';

SHOW BINARY LOGS;   ---查看二进制日志
 
---修改二进制日志记录格式
SET GLOBAL binlog_format = 'STATEMENT';
SET GLOBAL binlog_format = 'ROW';
SET GLOBAL binlog_format = 'MIXED';

show variables like 'log_bin';                 ----查看是否启用二进制日志
show binlog events in 'mysql-bin.000025';      ---查看二进制日志的事件
show binlog events;
show binlog events in 'log_name' from pos_number limit 2
show binary logs;        ---查看二进制日志的信息

show relaylog events [in 'relay_log_name'] [from pos_number] [limit 2];  

mysqlbinlog  log_name    ----查看二进制日志的内容
    --start-datetime
    --stop-datetime
    --short-form

    --start-position
    --stop-position
    --base64-output=decode-rows        --导出row格式   只能用于查看，恢复的时候不要加这个参数
    -v                                 --导出成sql格式  与--base64-output一同使用
    
--从远端读取二进制日志并保存
mysqlbinlog -u root -p -P 3306 -h host_name -R -r save_as_text_file_name remote_binlog_name
    --stop-never   ----持续获取不中断
    --raw          --二进制存储，否则以sql存储
 
    --flashback    -- >=5.7 DML语句生成回滚语句
    
    
binlog通配符
binlog.1282{20..32}    
    
#允许混合使用start-position和stop-datetime 但binlog的顺序不能乱
mysqlbinlog --start-position=6147873 --stop-datetime="2020-09-02 05:20:00"  binlog.1282{19..32} > x.sql


在执行操作前【set sql_log_bin=0(或者off)】可禁止执行的语句生成二进制日志



binlog  mysql层的日志 从连接后，主主从推给从
文件开头前4字节（MagicNumber）
\xfe\x62\x69\x6e






####redo undo  存储引擎层的日志
---使用独立的undo表空间，必须在数据库创建前指定（默认undo log存放于系统表空间）
innodb_undo_directory     ---指定undo日志的目录
innodb_undo_tablespaces   ---指定undo表空间数量

innodb_log_group_home_dir ---指定redo日志文件的目录 默认为data目录
innodb_log_file_size      ---指定redo日志文件的大小    
innodb_log_file_in_group  ---指定redo日志文件组的数量 


innodb_flush_log_at_trx_commit={0|1|2}   ---默认为1
0 每秒刷新log buffer
1 每次事务提交时log buffer写入log file，并刷新到磁盘
2 每次事务提交后或者每秒刷新log buffer

sync_binlog=n  ---0~4294967295为数字
在n次提交后binlog刷新到磁盘
0 提交时binlog不同步到磁盘，依赖操作系统刷新到磁盘，发起写动作，但存在缓存
1 每次提交写将binglog写到磁盘


sync_binlog=1 
innodb_flush_log_at_trx_commit=1
双1设置增强可用性


redo log 与 binlog 的一致性
  两阶段提交 2pc（执行commit命令时，未提交事务则写undo log）
  写 redo log 进入 prepare 状态
  写 binlog
  提交事务 进入 commit 状态


Undo logs exist within undo log segments, which are contained within rollback segments. 
Rollback segments reside in undo tablespaces and in the global temporary tablespace.

MVCC (Multiversion Concurrency Control)，多版本并发控制技术，它使得大部分支持行锁的事务引擎，不再单纯的使用行锁来进行数据库的并发控制，取而代之的是把数据库的行锁与行的多个版本结合起来，只需要很小的开销，就可以实现非锁定读，从而大大提高数据库系统的并发性能。

SELECT
Innodb检查每行数据，确保他们符合两个标准，符合则返回查询结果。
1、InnoDB只查找版本早于当前事务版本的数据行(也就是数据行的版本必须小于等于事务的版本)，这确保当前事务读取的行都是事务之前已经存在的，或者是由当前事务创建或修改的行
2、行的删除操作的版本一定是未定义的或者大于当前事务的版本号，确定了当前事务开始之前，行没有被删除

INSERT
InnoDB为每个新增行记录当前系统版本号作为创建ID。

DELETE
InnoDB为每个删除行的记录当前系统版本号作为行的删除ID。

UPDATE
InnoDB复制了一行。这个新行的版本号使用了系统版本号。它也把系统版本号作为了删除行的版本。


理想MVCC模型：
每行数据都存在一个版本，每次数据更新时都更新该版本（在内存中）
修改时copy出当前版本随意修改，各个事务之间无干扰
保存时比较版本号，如果成功（commit），则覆盖原记录；失败则放弃copy（rollback）
  
Innodb的实现方式：
事务以排他锁的形式修改原始数据
把修改前的数据存放于undo log，通过回滚指针与主数据关联
修改成功（commit）啥都不做，失败则恢复undo log中的数据（rollback）  
  

Innodb的实现真算不上MVCC，因为并没有实现核心的多版本共存，undo log中的内容只是串行化的结果，记录了多个事务的过程，不属于多版本共存。但理想的MVCC是难以实现的，当事务仅修改一行记录使用理想的MVCC模式是没有问题的，可以通过比较版本号进行回滚；但当事务影响到多行数据时，理想的MVCC据无能为力了。  

比如，如果Transaciton1执行理想的MVCC，修改Row1成功，而修改Row2失败，此时需要回滚Row1，但因为Row1没有被锁定，其数据可能又被Transaction2所修改，如果此时回滚Row1的内容，则会破坏Transaction2的修改结果，导致Transaction2违反ACID。

理想MVCC难以实现的根本原因在于企图通过乐观锁代替二段提交。修改两行数据，但为了保证其一致性，与修改两个分布式系统中的数据并无区别，而二提交是目前这种场景保证一致性的唯一手段。二段提交的本质是锁定，乐观锁的本质是消除锁定，二者矛盾，故理想的MVCC难以真正在实际中被应用，Innodb只是借了MVCC这个名字，提供了读的非阻塞而已。
  
  
使用undo日志可以将数据回滚到当前事务可查看的最大transaction_id时的数据，从而实现部分mvcc功能。
当确认所有的事务的transaction_id都已经大于undo保存的transaction_id时，这部分的undo日志可以清除。
实现未提交事务主动回滚。
  
  

undo log是采用段(segment)的方式来记录的， 由 innodb_rollback_segments 控制回滚段数量
每个回滚段中有1024个undo log segment，每个undo操作在记录的时候占用一个undo log segment
  
  
  
  
  
  
  
  
启动时，从redo日志获取最后checkpoint时的lsn，即使表明这个位点前的事务已经被持久化到数据文件，通过应用redo日志，实现事务不丢失。

重新更改配置文件再启动可能出现错误
1.redo log文件大小不一致，移除现有redo log的文件（需要先安全关闭mysql）


WAL机制 (Write Ahead Log)
对数据文件进行修改前，必须将修改先记录日志。
Redo log就是一种WAL的应用。当数据库忽然掉电，再重新启动时，MySQL可以通过Redo log还原数据。也就是说，每次事务提交时，不用同步刷新磁盘数据文件，只需要同步刷新Redo log就足够了。相比写数据文件时的随机IO，写Redo log时的顺序IO能够提高事务提交速度。


--crash safe相关参数为双1            
sync_binlog=1                        #binlog的刷新
innodb_flush_log_at_trx_commit=1     #redo日志的刷新


--组提交  group commit


在没有开启binlog时

    Redo log的刷盘操作将会是最终影响MySQL TPS的瓶颈所在。为了缓解这一问题，MySQL使用了组提交，将多个刷盘操作合并成一个。

当开启binlog时
    为了保证Redo log和binlog的数据一致性，MySQL使用了二阶段提交，由binlog作为事务的协调者。而 引入二阶段提交 使得binlog又成为了性能瓶颈，先前的Redo log 组提交 也成了摆设。为了再次缓解这一问题，MySQL增加了binlog的组提交，目的同样是将binlog的多个刷盘操作合并成一个，结合Redo log本身已经实现的 组提交，分为三个阶段(Flush 阶段、Sync 阶段、Commit 阶段)完成binlog 组提交，最大化每次刷盘的收益，弱化磁盘瓶颈，提高性能。

--参数 >=5.7.5
binlog_group_commit_sync_delay=N             在等待N μs 后，开始事务刷盘
binlog_group_commit_sync_no_delay_count=N    如果队列中的事务数达到N个，就忽视binlog_group_commit_sync_delay的设置，直接开始刷盘



#半同步复制 >= 5.5

rpl_semi_sync_master_wait_point >=5.7.2   

AFTER_SYNC (the default)
The master writes each transaction to its binary log and the slave, and syncs the binary log to disk. 
The master waits for slave acknowledgment of transaction receipt after the sync. 
Upon receiving acknowledgment, the master commits the transaction to the storage engine and returns a result to the client, which then can proceed.
等待从的确认在sync binlog事务给从之后
多复制的机制，主挂掉时事务已经被从复制，但有可能主尚未提交，因而出现从复制并持久比主已经提交的更多的事务。

AFTER_COMMIT
The master writes each transaction to its binary log and the slave, syncs the binary log, and commits the transaction to the storage engine. 
The master waits for slave acknowledgment of transaction receipt after the commit. 
Upon receiving acknowledgment, the master returns a result to the client, which then can proceed.
等待从的确认在提交给存储引擎之后，即先让存储引擎持久化但客户端还是会阻塞，提交给存储引擎即代表已经被持久化，只是当前的客户端还处于等待，其他客户端已经可以看到事务
少复制的机制，主挂掉导致主从切换切换时，从可能出现事务丢失（因为原来的主已经在存储引擎层commit）。



rpl_semi_sync_master_enabled                    启用半同步
rpl_semi_sync_slave_enabled                     启用半同步
rpl_semi_sync_master_wait_point                 after_sync after_commit    
rpl_semi_sync_master_timeout                    超过多少时间从没有响应则退化为异步复制
rpl_semi_sync_master_trace_level                semisynchronous replication debug trace level on the master        
rpl_semi_sync_master_wait_for_slave_count       至少等待多少个slave确认复制
rpl_semi_sync_master_wait_no_slave              出现退化到异步复制


mysql8 undo
# 查看undo表空间
select * from information_schema.INNODB_TABLESPACES where  name like '%undo%';
# 标记当前active的undo表空间为inactive，从而实现切换（因为有时undo表空间因为特殊原因没有切换导致空间异常增大）
alter undo tablespace innodb_undo_003 set inactive;
# 手动添加一个undo表空间
create undo tablespace innodb_undo_003 add datafile './innodb_undo_002.ibu';
# 删除undo表空间
drop undo tablespace innodb_undo_003;
